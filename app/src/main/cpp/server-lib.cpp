#include <jni.h>
#include <string>
#include <string.h>

extern "C" {
// Server
char SERVER_BASE_URL[100] = "https://monitservice.goodmonit.com/app";
char SERVER_START_URL[100] = "https://monitservice.goodmonit.com/app/start";
char DEV_SERVER_BASE_URL[100] = "https://monitdev.azurewebsites.net/app";
char DEV_SERVER_START_URL[100] = "https://monitdev.azurewebsites.net/app/start";

//char BLOB_CONNECTION_STRING[200] = "DefaultEndpointsProtocol=https;AccountName=goodmonit;AccountKey=+VEkpWCylKeeZT3pGTHTt9Q2fEHU3Ug8+N8/qFyyR2iEi6jfyccj08slH3jR+xXoWLoX4gwGi7xP62nTDfZFHA==;EndpointSuffix=core.windows.net";
//char BLOB_CONTAINER[200] = "diapersensorlog";

char YK_SIGNIN_URL[100] = "https://monitservice.goodmonit.com/yk/signin";
char YK_SIGNIN_SUCCEEDED_URL[100] = "https://monitservice.goodmonit.com/yk/login";
char YK_MOMQ_SIGNIN_URL[200] = "https://m.ykbrand.co.kr/SSL/LoginMonit?returnUrl=https%3a%2f%2fmonitservice.goodmonit.com%2fyk%2flogin&siteCode=MONIT";
char YK_MOMQ_SIGNUP_URL[200] = "https://m.ykbrand.co.kr/SSL/Join?returnUrl=https%3a%2f%2fmonitservice.goodmonit.com%2fyk%2flogin&sitecode=MONIT";

char DEV_YK_SIGNIN_URL[100] = "https://monitdev.azurewebsites.net/yk/signin";
char DEV_YK_SIGNIN_SUCCEEDED_URL[100] = "https://monitdev.azurewebsites.net/yk/login";
char DEV_YK_MOMQ_SIGNIN_URL[200] = "https://mykbrand.stiscloudbonds.com/SSL/LoginMonit?returnUrl=https%3a%2f%2fmonitdev.azurewebsites.net%2fyk%2flogin&siteCode=MONIT";
char DEV_YK_MOMQ_SIGNUP_URL[200] = "https://mykbrand.stiscloudbonds.com/SSL/Join?returnUrl=https%3a%2f%2fmonitdev.azurewebsites.net%2fyk%2flogin&sitecode=MONIT";

char DEV_YK_OAUTH2_SIGNIN_URL[400] = "https://fo.qa.sso.euc.kr/login?client_id=2&return_url=monitxhuggies%3a%2f%2fexternal%3ffrom%3dyk&site_code=MONIT&state=demchk5hdk21";
char DEV_YK_OAUTH2_SIGNUP_URL[400] = "https://fo.qa.sso.euc.kr/account/join?client_id=2&return_url=monitxhuggies%3a%2f%2fexternal%3ffrom%3dyk&site_code=MONIT&state=demchk5hdk21";
char DEV_YK_OAUTH2_SIGNIN_SUCCEEDED_URL[100] = "monitxhuggies://external?from=yk";
char YK_OAUTH2_SIGNIN_URL[400] = "https://yksso.co.kr/login?client_id=2&return_url=monitxhuggies%3a%2f%2fexternal%3ffrom%3dyk&site_code=MONIT&state=demchk5hdk21";
char YK_OAUTH2_SIGNUP_URL[400] = "https://yksso.co.kr/account/join?client_id=2&return_url=monitxhuggies%3a%2f%2fexternal%3ffrom%3dyk&site_code=MONIT&state=demchk5hdk21";
char YK_OAUTH2_SNSK1_SIGNIN_URL[400] = "https://yksso.co.kr/login/kakao/callback?code=";
char YK_OAUTH2_SNSK2_SIGNIN_URL[400] = "https://www.yksso.co.kr/login/kakao/callback?code=";
char YK_OAUTH2_SNSF1_SIGNIN_URL[400] = "https://yksso.co.kr/login/facebook/callback?code=";
char YK_OAUTH2_SNSF2_SIGNIN_URL[400] = "https://www.yksso.co.kr/login/facebook/callback?code=";
char YK_OAUTH2_SNSN1_SIGNIN_URL[400] = "https://yksso.co.kr/login/naver/callback?code=";
char YK_OAUTH2_SNSN2_SIGNIN_URL[400] = "https://www.yksso.co.kr/login/naver/callback?code=";
char YK_OAUTH2_SNS_SIGNIN_URL[400] = "https://yksso.co.kr/sns/loginCallback";
char YK_OAUTH2_FIND_ID_URL[400] = "https://www.yksso.co.kr/find/id";
char YK_OAUTH2_FIND_PW_URL[400] = "https://www.yksso.co.kr/find/password";
char YK_OAUTH2_JOIN_URL[400] = "https://www.yksso.co.kr/account/join";
//char YK_OAUTH2_SIGNIN_URL[400] = "https://www.yksso.ykbrand.co.kr/Account/Login?ReturnUrl=%2Fconnect%2Fauthorize%2Fcallback%3Fclient_id%3DMonit_Android%26response_type%3Dcode%2520id_token%2520token%26scope%3Dopenid%2520profile%26redirect_uri%3Dmonitxhuggies%253A%252F%252Fexternal%253Ffrom%253Dyk%26state%3Dtestmtk%26nonce%3Drandom_nonce%26";
//char YK_OAUTH2_SIGNUP_URL[400] = "https://m.ykbrand.co.kr/SSL/Join?returnUrl=https%3a%2f%2fmonitservice.goodmonit.com%2fyk%2flogin&sitecode=MONIT";

char GOOGLE_ASSISTANT_URL[400] = "https://assistant.google.com/services/a/uid/00000058d7533117?hl=ko&hl=ko-KR&jsmode=o&source=web";

char SUPPORT_URL_KO[200] = "https://goodmonit.co.kr/monit_manual/sbm/main_sbm.html";
char SUPPORT_URL_GLOBAL[200] = "https://website.goodmonit.com/support/support/en";
char SUPPORT_URL_KCHUGGIES[200] = "https://www.huggies.com/en-us/HuggiesxMonit/support-faqs";

char NOTICE_URL[200] = "https://website.goodmonit.com/Board?";
char DEV_NOTICE_URL[200] = "https://monitetcservicedev.azurewebsites.net/Board?";

char LEGAL_TERMS_AND_CONDITION_URL_KO[200] = "https://website.goodmonit.com/legal/service/ko";
char LEGAL_TERMS_AND_CONDITION_URL_GLOBAL[200] = "https://website.goodmonit.com/legal/service/global";
char LEGAL_TERMS_AND_CONDITION_URL_KCHUGGIES[200] = "https://www.huggies.com/en-us/HuggiesxMonit/terms-and-conditions";

char LEGAL_PRIVACY_URL_KO[200] = "https://website.goodmonit.com/legal/privacy/ko";
char LEGAL_PRIVACY_URL_GLOBAL[200] = "https://website.goodmonit.com/legal/privacy/global";
char LEGAL_PRIVACY_URL_GDPR[200] = "https://website.goodmonit.com/legal/privacy/gdpr";
char LEGAL_PRIVACY_URL_KCHUGGIES[200] = "https://www.huggies.com/en-us/HuggiesxMonit/privacy-policy";

char LEGAL_COLLECT_INFO_URL_KO[200] = "https://website.goodmonit.com/legal/collect/ko";

char LEGAL_PROVIDE_3RD_PARTY_URL_KO[200] = "https://website.goodmonit.com/legal/disclosure3rdparty/ko";
char LEGAL_PROVIDE_3RD_PARTY_URL_KAO[200] = "https://website.goodmonit.com/legal/disclosure3rdparty/kao";

JNIEXPORT jstring JNICALL
Java_goodmonit_monit_com_kao_managers_sm_gp(JNIEnv *env, jobject, jint type) {
    switch (type) {
        case 1: return env->NewStringUTF("yyMMdd-HHmmss");
        case 2: return env->NewStringUTF("pkt");
        case 3: return env->NewStringUTF("aid");
        case 4: return env->NewStringUTF("token");
        case 5: return env->NewStringUTF("lang");
        case 6: return env->NewStringUTF("os");
        case 7: return env->NewStringUTF("atype");
        case 8: return env->NewStringUTF("ver");
        case 9: return env->NewStringUTF("ltime");
        case 10: return env->NewStringUTF("device");
        case 11: return env->NewStringUTF("data");
        case 12: return env->NewStringUTF("email");
        case 13: return env->NewStringUTF("pw");
        case 14: return env->NewStringUTF("userid");
        case 15: return env->NewStringUTF("time");
        case 16: return env->NewStringUTF("nick");
        case 17: return env->NewStringUTF("bday");
        case 18: return env->NewStringUTF("sex");
        case 19: return env->NewStringUTF("push");
        case 20: return env->NewStringUTF("ptype");
        case 21: return env->NewStringUTF("pid");
        case 22: return env->NewStringUTF("sid");
        case 23: return env->NewStringUTF("ftype");
        case 24: return env->NewStringUTF("tid");
        case 25: return env->NewStringUTF("name");
        case 26: return env->NewStringUTF("did");
        case 27: return env->NewStringUTF("enc");
        case 28: return env->NewStringUTF("type");
        case 29: return env->NewStringUTF("cid");
        case 30: return env->NewStringUTF("fwv");
        case 31: return env->NewStringUTF("onnt");
        case 32: return env->NewStringUTF("offt");
        case 33: return env->NewStringUTF("tmax");
        case 34: return env->NewStringUTF("tmin");
        case 35: return env->NewStringUTF("hmax");
        case 36: return env->NewStringUTF("hmin");
        case 37: return env->NewStringUTF("extra");
        case 38: return env->NewStringUTF("noti");
        case 39: return env->NewStringUTF("tem");
        case 40: return env->NewStringUTF("hum");
        case 41: return env->NewStringUTF("voc");
        case 42: return env->NewStringUTF("cap");
        case 43: return env->NewStringUTF("act");
        case 44: return env->NewStringUTF("srl");
        case 45: return env->NewStringUTF("mac");
        case 46: return env->NewStringUTF("alm");
        case 47: return env->NewStringUTF("sens");
        case 48: return env->NewStringUTF("member");
        case 49: return env->NewStringUTF("bat");
        case 50: return env->NewStringUTF("opr");
        case 51: return env->NewStringUTF("mov");
        case 52: return env->NewStringUTF("dps");
        case 53: return env->NewStringUTF("dtime");
        case 54: return env->NewStringUTF("con");
        case 55: return env->NewStringUTF("pow");
        case 56: return env->NewStringUTF("brt");
        case 57: return env->NewStringUTF("clr");
        case 58: return env->NewStringUTF("att");
        case 59: return env->NewStringUTF("ctem");
        case 60: return env->NewStringUTF("chum");
        case 61: return env->NewStringUTF("cvoc");
        case 62: return env->NewStringUTF("apn");
        case 63: return env->NewStringUTF("aps");
        case 64: return env->NewStringUTF("beta");
        case 65: return env->NewStringUTF("get");
        case 66: return env->NewStringUTF("notification");
        case 67: return env->NewStringUTF("url");
        case 68: return env->NewStringUTF("file");
        case 69: return env->NewStringUTF("step");
        case 70: return env->NewStringUTF("rmode");
        case 71: return env->NewStringUTF("title");
        case 72: return env->NewStringUTF("detail");
        case 73: return env->NewStringUTF("from");
        case 74: return env->NewStringUTF("sitecode");
        case 75: return env->NewStringUTF("yk");
        case 76: return env->NewStringUTF("close");
        case 77: return env->NewStringUTF("app");
        case 78: return env->NewStringUTF("monit");
        case 79: return env->NewStringUTF("hub");
        case 80: return env->NewStringUTF("appdata");
        case 81: return env->NewStringUTF("UTC");
        case 82: return env->NewStringUTF("700101-000000");
        case 83: return env->NewStringUTF("err");
        case 84: return env->NewStringUTF("policy");
        case 85: return env->NewStringUTF("mode");
        case 86: return env->NewStringUTF("momq");
        case 87: return env->NewStringUTF("temunit");
        case 88: return env->NewStringUTF("stime");
        case 89: return env->NewStringUTF("etime");
        case 90: return env->NewStringUTF("pee");
        case 91: return env->NewStringUTF("poo");
        case 92: return env->NewStringUTF("change");
        case 93: return env->NewStringUTF("fart");
        case 94: return env->NewStringUTF("threshold");
        case 95: return env->NewStringUTF("count_time");
        case 96: return env->NewStringUTF("alarm_delay");
        case 97: return env->NewStringUTF("ignore_delay");
        case 98: return env->NewStringUTF("agree");
        case 99: return env->NewStringUTF("_id");
        case 100: return env->NewStringUTF("notice_type");
        case 101: return env->NewStringUTF("contents");
        case 102: return env->NewStringUTF("is_enabled");
        case 103: return env->NewStringUTF("to");
        case 104: return env->NewStringUTF("sen");
        case 105: return env->NewStringUTF("mlv");
        case 106: return env->NewStringUTF("playground");
        case 107: return env->NewStringUTF("chtype");
        case 108: return env->NewStringUTF("evttype");
        case 109: return env->NewStringUTF("sctype");
        case 110: return env->NewStringUTF("sevt");
        case 111: return env->NewStringUTF("eevt");
        case 112: return env->NewStringUTF("eat");
        case 113: return env->NewStringUTF("eth");
        case 114: return env->NewStringUTF("co2");
        case 115: return env->NewStringUTF("pres");
        case 116: return env->NewStringUTF("comp");
        case 117: return env->NewStringUTF("nid");
        case 118: return env->NewStringUTF("edit_type");
        case 119: return env->NewStringUTF("where");
        case 120: return env->NewStringUTF("is_full");
        case 121: return env->NewStringUTF("created");
        case 122: return env->NewStringUTF("auth_key");
        case 123: return env->NewStringUTF("board_type");
        case 124: return env->NewStringUTF("board_id");
        case 125: return env->NewStringUTF("offptime");
        case 126: return env->NewStringUTF("onptime");
        case 127: return env->NewStringUTF("cnt");
        case 128: return env->NewStringUTF("heat");
        case 129: return env->NewStringUTF("cpee");
        case 130: return env->NewStringUTF("cpoo");
        case 131: return env->NewStringUTF("cabn");
        case 132: return env->NewStringUTF("cfart");
        case 133: return env->NewStringUTF("cdet");
        case 134: return env->NewStringUTF("catt");
        case 135: return env->NewStringUTF("lpeet");
        case 136: return env->NewStringUTF("lpoot");
        case 137: return env->NewStringUTF("labnt");
        case 138: return env->NewStringUTF("lfart");
        case 139: return env->NewStringUTF("ldett");
        case 140: return env->NewStringUTF("lattt");
        case 141: return env->NewStringUTF("id_token");
        case 142: return env->NewStringUTF("access_token");
        case 143: return env->NewStringUTF("code");
        case 144: return env->NewStringUTF("yk#");
        case 145: return env->NewStringUTF("yk&");
        case 146: return env->NewStringUTF("monitxhuggies://external?from=yk");
        case 147: return env->NewStringUTF("lamp");
        case 148: return env->NewStringUTF("current_pw");
        case 149: return env->NewStringUTF("monit_force");
        case 150: return env->NewStringUTF("hub_force");
        case 151: return env->NewStringUTF("lamp_force");
        case 152: return env->NewStringUTF("appdata2");
        case 153: return env->NewStringUTF("dscore");
        case 154: return env->NewStringUTF("voc_avg");
        case 155: return env->NewStringUTF("is_start");
        case 156: return env->NewStringUTF("adv");
        case 157: return env->NewStringUTF("cap_ch_1");
        case 158: return env->NewStringUTF("cap_ch_2");
        case 159: return env->NewStringUTF("cap_ch_3");
        case 160: return env->NewStringUTF("cap_ch_4");
        case 161: return env->NewStringUTF("cap_ch_5");
        case 162: return env->NewStringUTF("cap_ch_6");
        case 163: return env->NewStringUTF("cap_ch_7");
        case 164: return env->NewStringUTF("cap_ch_8");
        case 165: return env->NewStringUTF("cap_ch_9");
        case 166: return env->NewStringUTF("sbat");
        case 167: return env->NewStringUTF("sleep");

        case 200: return env->NewStringUTF(SERVER_START_URL);
        case 201: return env->NewStringUTF(SERVER_BASE_URL);
        //case 202: return env->NewStringUTF(BLOB_CONNECTION_STRING);
        //case 203: return env->NewStringUTF(BLOB_CONTAINER);
        case 204: return env->NewStringUTF(DEV_SERVER_START_URL);
        case 205: return env->NewStringUTF(DEV_SERVER_BASE_URL);

        case 250: return env->NewStringUTF(YK_SIGNIN_URL);
        case 251: return env->NewStringUTF(YK_MOMQ_SIGNIN_URL);
        case 252: return env->NewStringUTF(YK_MOMQ_SIGNUP_URL);
        case 253: return env->NewStringUTF(YK_SIGNIN_SUCCEEDED_URL);
        case 254: return env->NewStringUTF(DEV_YK_SIGNIN_URL);
        case 255: return env->NewStringUTF(DEV_YK_MOMQ_SIGNIN_URL);
        case 256: return env->NewStringUTF(DEV_YK_MOMQ_SIGNUP_URL);
        case 257: return env->NewStringUTF(DEV_YK_SIGNIN_SUCCEEDED_URL);
        case 258: return env->NewStringUTF(DEV_YK_OAUTH2_SIGNIN_URL);
        case 259: return env->NewStringUTF(DEV_YK_OAUTH2_SIGNUP_URL);
        case 260: return env->NewStringUTF(YK_OAUTH2_SIGNIN_URL);
        case 261: return env->NewStringUTF(YK_OAUTH2_SIGNUP_URL);
        case 262: return env->NewStringUTF(DEV_YK_OAUTH2_SIGNIN_SUCCEEDED_URL);
        case 263: return env->NewStringUTF(YK_OAUTH2_SNSK1_SIGNIN_URL);
        case 264: return env->NewStringUTF(YK_OAUTH2_SNSK2_SIGNIN_URL);
        case 265: return env->NewStringUTF(YK_OAUTH2_SNSF1_SIGNIN_URL);
        case 266: return env->NewStringUTF(YK_OAUTH2_SNSF2_SIGNIN_URL);
        case 267: return env->NewStringUTF(YK_OAUTH2_SNSN1_SIGNIN_URL);
        case 268: return env->NewStringUTF(YK_OAUTH2_SNSN2_SIGNIN_URL);
        case 269: return env->NewStringUTF(YK_OAUTH2_SNS_SIGNIN_URL);
        case 270: return env->NewStringUTF(YK_OAUTH2_FIND_ID_URL);
        case 271: return env->NewStringUTF(YK_OAUTH2_FIND_PW_URL);
        case 272: return env->NewStringUTF(YK_OAUTH2_JOIN_URL);

        case 300: return env->NewStringUTF(SUPPORT_URL_KO);
        case 301: return env->NewStringUTF(SUPPORT_URL_GLOBAL);
        case 320: return env->NewStringUTF(LEGAL_TERMS_AND_CONDITION_URL_KO);
        case 321: return env->NewStringUTF(LEGAL_TERMS_AND_CONDITION_URL_GLOBAL);
        case 340: return env->NewStringUTF(LEGAL_PRIVACY_URL_KO);
        case 341: return env->NewStringUTF(LEGAL_PRIVACY_URL_GLOBAL);
        case 342: return env->NewStringUTF(LEGAL_PRIVACY_URL_GDPR);
        case 360: return env->NewStringUTF(LEGAL_COLLECT_INFO_URL_KO);
        case 380: return env->NewStringUTF(LEGAL_PROVIDE_3RD_PARTY_URL_KO);
        case 381: return env->NewStringUTF(LEGAL_PROVIDE_3RD_PARTY_URL_KAO);
        case 390: return env->NewStringUTF(NOTICE_URL);
        case 391: return env->NewStringUTF(DEV_NOTICE_URL);
        case 392: return env->NewStringUTF(LEGAL_TERMS_AND_CONDITION_URL_KCHUGGIES);
        case 393: return env->NewStringUTF(LEGAL_PRIVACY_URL_KCHUGGIES);
        case 394: return env->NewStringUTF(SUPPORT_URL_KCHUGGIES);
        case 395: return env->NewStringUTF(GOOGLE_ASSISTANT_URL);

        case 500: return env->NewStringUTF("enc_diaper_sensor_version");
        case 501: return env->NewStringUTF("enc_hub_version");
        case 502: return env->NewStringUTF("enc_market_version");
        case 503: return env->NewStringUTF("enc_local_version");
        case 504: return env->NewStringUTF("enc_latest_version");
        case 505: return env->NewStringUTF("enc_account_id");
        case 506: return env->NewStringUTF("enc_signin_token");
        case 507: return env->NewStringUTF("enc_signin_email");
        case 508: return env->NewStringUTF("enc_signin_state");
        case 509: return env->NewStringUTF("enc_push_token");
        case 510: return env->NewStringUTF("enc_push_id");
        case 511: return env->NewStringUTF("enc_update_push_token_type");
        case 512: return env->NewStringUTF("enc_cloud_id");
        case 513: return env->NewStringUTF("enc_short_id");
        case 514: return env->NewStringUTF("enc_profile_name");
        case 515: return env->NewStringUTF("enc_profile_birthday");
        case 516: return env->NewStringUTF("enc_profile_sex");
        case 517: return env->NewStringUTF("enc_selected_baby_id");
        case 518: return env->NewStringUTF("enc_latest_notification_time_ms_");
        case 519: return env->NewStringUTF("enc_latest_saved_notification_index_");
        case 520: return env->NewStringUTF("enc_latest_checked_notification_index_");
        case 521: return env->NewStringUTF("enc_latest_diaper_detected_time_ms_");
        case 522: return env->NewStringUTF("enc_latest_diaper_status_updated_time_sec_");
        case 523: return env->NewStringUTF("enc_latest_hub_graph_updated_time_sec_");
        case 524: return env->NewStringUTF("enc_display_temperature_scale");
        case 525: return env->NewStringUTF("enc_latest_foreground_fragment_id");
        case 526: return env->NewStringUTF("enc_latest_push_update_data");
        case 527: return env->NewStringUTF("enc_gatt_connection_failed_alarm");
        case 528: return env->NewStringUTF("enc_do_not_show_dialog_");
        case 529: return env->NewStringUTF("enc_invalid_token_received");
        case 530: return env->NewStringUTF("enc_agreement_status");
        case 531: return env->NewStringUTF("enc_device_alarm_enabled_");
        case 532: return env->NewStringUTF("enc_device_name_");
        case 533: return env->NewStringUTF("enc_device_status_");
        case 534: return env->NewStringUTF("enc_detection_test_enabled");
        case 535: return env->NewStringUTF("enc_pee_detection_test_count");
        case 536: return env->NewStringUTF("enc_pee_detection_test_ignore_delay");
        case 537: return env->NewStringUTF("enc_pee_detection_test_alarm_delay");
        case 538: return env->NewStringUTF("enc_policy_agreed");
        case 539: return env->NewStringUTF("enc_policy_set_time_sec");
        case 540: return env->NewStringUTF("enc_device_serial_");
        case 541: return env->NewStringUTF("enc_need_hub_registration_dialog");
        case 542: return env->NewStringUTF("enc_latest_notification_edit_time_ms_");
        case 543: return env->NewStringUTF("enc_auth_token");
        case 544: return env->NewStringUTF("enc_auth_token_expired_time_ms");
        case 545: return env->NewStringUTF("enc_device_lamp_off_timer_target_ms");
        case 546: return env->NewStringUTF("enc_device_lamp_on_timer_target_ms");
        case 547: return env->NewStringUTF("enc_show_tooltip_box_");
        case 548: return env->NewStringUTF("enc_widget_refresh_period_min_");
        case 549: return env->NewStringUTF("enc_widget_show_device_list_");
        case 550: return env->NewStringUTF("enc_latest_sensor_movement_updated_time_ms_");
        case 551: return env->NewStringUTF("enc_latest_sensor_diaper_status_upload_time_sec_");
        case 552: return env->NewStringUTF("enc_lamp_version");
        case 553: return env->NewStringUTF("enc_latest_lamp_graph_updated_time_sec_");
        case 554: return env->NewStringUTF("enc_device_notification_filter_");
        case 555: return env->NewStringUTF("enc_diaper_sensor_force_version");
        case 556: return env->NewStringUTF("enc_hub_force_version");
        case 557: return env->NewStringUTF("enc_lamp_force_version");
        case 558: return env->NewStringUTF("enc_sleeping_start_time_");
        case 559: return env->NewStringUTF("enc_is_app_forcibly_closed");
        case 560: return env->NewStringUTF("enc_the_latest_diaper_changed_time_");
        case 561: return env->NewStringUTF("enc_sleeping_enabled");
        case 562: return env->NewStringUTF("enc_latest_feeding_amount_input_");
        case 563: return env->NewStringUTF("enc_diaper_check_notification_");
        case 564: return env->NewStringUTF("enc_latest_notification_shown_time_");
        case 565: return env->NewStringUTF("enc_auto_sleeping_detection_");
        case 566: return env->NewStringUTF("enc_latest_movement_graph_updated_time_sec_");
        case 567: return env->NewStringUTF("enc_diaper_sensor_current_sleeping_level_");
        case 568: return env->NewStringUTF("enc_latest_sleep_graph_updated_time_sec_");

        case 1000: return env->NewStringUTF("Init");
        case 1001: return env->NewStringUTF("GetLatestInfo");
        case 1002: return env->NewStringUTF("SetSensorConnectionLog");
        case 1003: return env->NewStringUTF("Signin");
        case 1004: return env->NewStringUTF("YKSignin");
        case 1005: return env->NewStringUTF("Join1");
        case 1006: return env->NewStringUTF("Join2");
        case 1007: return env->NewStringUTF("Join3");
        case 1008: return env->NewStringUTF("Signout");
        case 1009: return env->NewStringUTF("Leave");
        case 1010: return env->NewStringUTF("ResendAuth");
        case 1011: return env->NewStringUTF("UpdatePush");
        case 1012: return env->NewStringUTF("FindPasswd");
        case 1013: return env->NewStringUTF("ChangePassword");
        case 1014: return env->NewStringUTF("ChangeNickname");
        case 1015: return env->NewStringUTF("GetUserInfo");
        case 1016: return env->NewStringUTF("InviteCloudMember");
        case 1017: return env->NewStringUTF("DeleteCloudMember");
        case 1018: return env->NewStringUTF("LeaveCloud");
        case 1019: return env->NewStringUTF("GetDeviceId");
        case 1020: return env->NewStringUTF("GetCloudId");
        case 1021: return env->NewStringUTF("SetCloudId");
        case 1022: return env->NewStringUTF("SetDeviceName");
        case 1023: return env->NewStringUTF("SetDeviceAlarmStatus");
        case 1024: return env->NewStringUTF("GetDeviceStatus");
        case 1025: return env->NewStringUTF("RequestBecomeCloudMember");
        case 1026: return env->NewStringUTF("GetDeviceFullStatus");
        case 1027: return env->NewStringUTF("GetNotification");
        case 1028: return env->NewStringUTF("GetCloudNotification");
        case 1029: return env->NewStringUTF("InitDevice");
        case 1030: return env->NewStringUTF("OTAUpdateDevice");
        case 1031: return env->NewStringUTF("SetDiaperChanged");
        case 1032: return env->NewStringUTF("UpdateFWVersion");
        case 1033: return env->NewStringUTF("InitDiaperStatus");
        case 1034: return env->NewStringUTF("StartConnection");
        case 1035: return env->NewStringUTF("SetLedOnOffTime");
        case 1036: return env->NewStringUTF("SetAlarmThreshold");
        case 1037: return env->NewStringUTF("GetNotice");
        case 1038: return env->NewStringUTF("GetSensorFW");
        case 1039: return env->NewStringUTF("SetSensorSensitivity");
        case 1040: return env->NewStringUTF("GetAppData");
        case 1041: return env->NewStringUTF("SetDeviceStatus");
        case 1042: return env->NewStringUTF("GetHubGraphList");
        case 1043: return env->NewStringUTF("SetBabyInfo");
        case 1044: return env->NewStringUTF("SetNotificationFeedback");
        case 1045: return env->NewStringUTF("SetDiaperSensingLog");
        case 1046: return env->NewStringUTF("GetPolicyList");
        case 1047: return env->NewStringUTF("SetPolicyInsertList");
        case 1048: return env->NewStringUTF("SetPolicyDeleteList");
        case 1049: return env->NewStringUTF("SetPolicyDeleteAll");
        case 1050: return env->NewStringUTF("ResetPassword");
        //case 1051: return env->NewStringUTF("GetLatestApkUrl");
        case 1052: return env->NewStringUTF("SetAppInfo");
        case 1053: return env->NewStringUTF("GetSensorGraphAverage");
        case 1054: return env->NewStringUTF("GetDemoInfo");
        case 1055: return env->NewStringUTF("RemoveNotification");
        case 1056: return env->NewStringUTF("SetPolicy");
        case 1057: return env->NewStringUTF("GetPolicy");
        case 1058: return env->NewStringUTF("GetNoticeV2");
        case 1059: return env->NewStringUTF("GetMaintenance");
        case 1060: return env->NewStringUTF("GetMaintenance_Notice");
        case 1061: return env->NewStringUTF("InitDeviceOwner");
        case 1062: return env->NewStringUTF("AccountActiveUser");
        case 1063: return env->NewStringUTF("ChannelEvent");
        case 1064: return env->NewStringUTF("ScreenAnalytics");
        case 1065: return env->NewStringUTF("SetNotificationEdit");
        case 1066: return env->NewStringUTF("GetNotificationEdit");
        case 1067: return env->NewStringUTF("OAuthGetAuth");
        case 1068: return env->NewStringUTF("GetHubTimerInfo");
        case 1069: return env->NewStringUTF("GetSensorMovGraphList");
        case 1070: return env->NewStringUTF("YKSigninOAuth2");
        case 1071: return env->NewStringUTF("GetLampGraphList");
        case 1072: return env->NewStringUTF("AvailableSerialNumber");
        case 1073: return env->NewStringUTF("ChangePasswordV2");
        case 1074: return env->NewStringUTF("GetSensorFWV2");
        case 1075: return env->NewStringUTF("GetLocalAppData");
        case 1076: return env->NewStringUTF("SetSleepMode");
        case 1077: return env->NewStringUTF("SetHubBrightControl");
        case 1078: return env->NewStringUTF("GetSensorSleepGraphList");
        case 1079: return env->NewStringUTF("SetDeviceAlarmStatusCommon");

        case 2000: return env->NewStringUTF("tooltip_open_lamp_section");
        case 2001: return env->NewStringUTF("tooltip_lamp_off_timer");
        case 2002: return env->NewStringUTF("tooltip_lamp_brightness_button");

        default: return env->NewStringUTF("");
    }
}


} // End Extern "C"